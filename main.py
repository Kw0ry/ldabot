import logging
import logging.config
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from datetime import datetime, timedelta
import pytz
from typing import Dict, Any, List

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import config
from database import db
from keyboards import (
    get_admin_keyboard,
    get_event_management_keyboard,
    get_edit_keyboard,
    get_back_keyboard
)
from utils import (
    validate_date,
    format_event,
    publish_to_channel,
    notify_organizer
)

storage = RedisStorage.from_url(config.redis_url)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.fileConfig('logging.conf')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.bot_token)
from aiogram.fsm.storage.redis import DefaultKeyBuilder, RedisStorage
from redis.asyncio import ConnectionPool

redis_pool = ConnectionPool.from_url(
    f"redis://{config.redis_host}:{config.redis_port}/{config.redis_db}"
)
storage = RedisStorage(redis_pool, key_builder=DefaultKeyBuilder(with_bot_id=True))

dp = Dispatcher(bot, storage=storage)

class EventStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_date = State()
    waiting_for_address = State()
    waiting_for_price = State()
    waiting_for_link = State()
    waiting_for_photo = State()

class AdminStates(StatesGroup):
    editing_event = State()
    editing_field = State()
    editing_value = State()
    scheduling_post = State()
    scheduling_time = State()
    sending_notification = State()
    setting_notification_frequency = State()

# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ======================

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    db.save_user(user_id, {
        "username": username,
        "full_name": full_name,
        "last_active": datetime.now().isoformat(),
        "last_notified": None
    })
    
    if user_id in config.ADMIN_IDS:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–∞–∂–º–∏—Ç–µ /create_event"
        )

@dp.message_handler(commands=['create_event'])
async def cmd_create_event(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if message.from_user.id in config.ADMIN_IDS:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return
    
    await EventStates.waiting_for_title.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø ======================

@dp.message_handler(state=EventStates.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with state.proxy() as data:
        data['title'] = message.text
        data['organizer'] = message.from_user.username
        data['organizer_id'] = message.from_user.id
    
    await EventStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

@dp.message_handler(state=EventStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with state.proxy() as data:
        data['description'] = message.text
    
    await EventStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")

@dp.message_handler(state=EventStates.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    date = validate_date(message.text)
    if not date:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
        return
    
    async with state.proxy() as data:
        data['date'] = message.text
        data['date_obj'] = date.isoformat()
    
    await EventStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

@dp.message_handler(state=EventStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥—Ä–µ—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with state.proxy() as data:
        data['address'] = message.text
    
    await EventStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (0 –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ):")

@dp.message_handler(state=EventStates.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    async with state.proxy() as data:
        data['price'] = price
    
    await EventStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏):")

@dp.message_handler(state=EventStates.waiting_for_link)
async def process_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    async with state.proxy() as data:
        data['link'] = message.text
    
    await EventStates.next()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∏–ª–∏ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç):")

@dp.message_handler(content_types=['photo', 'text'], state=EventStates.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with state.proxy() as data:
        if message.photo:
            data['photo'] = message.photo[-1].file_id
        else:
            data['photo'] = None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_id = db.save_event(data.as_dict())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in config.ADMIN_IDS:
            try:
                if data['photo']:
                    await bot.send_photo(
                        chat_id=admin_id,
                        photo=data['photo'],
                        caption=format_event(data.as_dict()),
                        reply_markup=get_event_management_keyboard(event_id),
                        parse_mode='HTML'
                    )
                else:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=format_event(data.as_dict()),
                        reply_markup=get_event_management_keyboard(event_id),
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"Error sending event to admin {admin_id}: {e}")
    
    await state.finish()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

# ====================== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======================

@dp.callback_query_handler(lambda c: c.data.startswith('edit_'))
async def process_edit_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    event_id = callback_query.data.split('_')[1]
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_keyboard(event_id)
    )

@dp.callback_query_handler(lambda c: c.data.startswith('editfield_'))
async def process_edit_field_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _, event_id, field = callback_query.data.split('_')
    
    await AdminStates.editing_event.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
        data['field'] = field
    
    await AdminStates.editing_value.set()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}':"
    )

@dp.message_handler(state=AdminStates.editing_value)
async def process_editing_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è"""
    async with state.proxy() as data:
        event_id = data['event_id']
        field = data['field']
        event = db.get_event(event_id)
        
        if field == '–¥–∞—Ç–∞':
            new_date = validate_date(message.text)
            if not new_date:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
                return
            event['date'] = message.text
            event['date_obj'] = new_date.isoformat()
        elif field == '—Å—Ç–æ–∏–º–æ—Å—Ç—å':
            try:
                event['price'] = int(message.text)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
                return
        elif field == '—Ñ–æ—Ç–æ':
            if message.photo:
                event['photo'] = message.photo[-1].file_id
            else:
                event['photo'] = None
        else:
            event[field] = message.text
        
        db.update_event(event_id, event)
        
        if event['photo']:
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=event['photo'],
                caption=format_event(event),
                reply_markup=get_event_management_keyboard(event_id),
                parse_mode='HTML'
            )
        else:
            await bot.send_message(
                chat_id=message.from_user.id,
                text=format_event(event),
                reply_markup=get_event_management_keyboard(event_id),
                parse_mode='HTML'
            )
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('schedule_'))
async def process_schedule_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    event_id = callback_query.data.split('_')[1]
    
    await AdminStates.scheduling_post.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
    
    await AdminStates.scheduling_time.set()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:"
    )

@dp.message_handler(state=AdminStates.scheduling_time)
async def process_scheduling_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    publish_time = validate_date(message.text)
    if not publish_time:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
        return
    
    async with state.proxy() as data:
        event_id = data['event_id']
        event = db.get_event(event_id)
        
        from tasks import schedule_post
        schedule_post.apply_async(
            args=[event_id, event],
            eta=publish_time
        )
        
        await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ {message.text}")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('publish_'))
async def process_publish_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = callback_query.data.split('_')[1]
    event = db.get_event(event_id)
    
    success = await publish_to_channel(event_id, event)
    if success:
        db.move_event(event_id, "pending_events", "published_events")
        await notify_organizer(
            event['organizer_id'],
            "‚úÖ –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!"
        )
        await bot.answer_callback_query(callback_query.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    else:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith('reject_'))
async def process_reject_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = callback_query.data.split('_')[1]
    
    await AdminStates.editing_event.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_back_keyboard(event_id)
    )

@dp.message_handler(state=AdminStates.editing_event)
async def process_rejection_reason(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    async with state.proxy() as data:
        event_id = data['event_id']
        event = db.get_event(event_id)
        
        db.move_event(event_id, "pending_events", "rejected_events")
        await notify_organizer(
            event['organizer_id'],
            f"‚ùå –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {message.text}"
        )
    
    await state.finish()
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")

# ====================== –†–ê–°–°–´–õ–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ======================

@dp.message_handler(lambda message: message.from_user.id in config.ADMIN_IDS and message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
async def cmd_notification_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await AdminStates.sending_notification.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º:")

@dp.message_handler(state=AdminStates.sending_notification)
async def process_notification_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    async with state.proxy() as data:
        data['message'] = message.text
    
    await AdminStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7 –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏):")

@dp.message_handler(state=AdminStates.setting_notification_frequency)
async def process_notification_frequency(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Å—Ç–æ—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        frequency = int(message.text)
        if frequency <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return
    
    async with state.proxy() as data:
        notification_message = data['message']
        inactive_users = db.get_inactive_organizers(frequency)
        
        for user_id in inactive_users:
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=notification_message
                )
                db.update_user(user_id, {"last_notified": datetime.now().isoformat()})
            except Exception as e:
                logger.error(f"Error sending notification to {user_id}: {e}")
        
        await message.answer(
            f"–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(inactive_users)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. "
            f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ {frequency} –¥–Ω–µ–π."
        )
    
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
